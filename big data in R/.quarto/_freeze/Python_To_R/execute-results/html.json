{
  "hash": "08120fe297ab6e164e6dd1ad16523f23",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  eval: false\n---\n\n\n\n\n# Python to R {.unnumbered}\n\n## 对象转换\n\n| R | Python | 例 |\n|------------------------|------------------------|------------------------|\n| 单元素向量 | 标量Scalar | `1`、 `1L`、`TRUE`、`\"foo\"` |\n| 未命名列表或多元素向量 | List | `c(1.0, 2.0, 3.0)`, `c(1L, 2L, 3L)` |\n| 命名列表 | Dict | `list(a = 1L, b = 2.0)`, `dict(x = x_data)` |\n| Matrix/Array | NumPy ndarray | `matrix(c(1,2,3,4), nrow = 2, ncol = 2)` |\n| Data Frame | Pandas DataFrame | `data.frame(x = c(1,2,3), y = c(\"a\", \"b\", \"c\"))` |\n| Function | Python function | `function(x) x + 1` |\n| NULL, TRUE, FALSE | None, True, False | `NULL`, `TRUE`, `ALSE` |\n\n: Type conversions\n\n## [`reticulate::`](https://rstudio.github.io/reticulate/index.html){.uri}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n#devtools::install_version( \"ggmap\",  version = \"3.5.2\")\n\n\"R code\"\n\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\"python code\"\n```\n:::\n\n\n\n\n### **R 安装 python 模块**\n\n[reticulate：安装Python module](https://rstudio.github.io/reticulate/articles/python_packages.html)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\npy_config()\npy_module_available('pip')\n\n#  Anaconda 激活环境   pip install scanpy -i https://pypi.tuna.tsinghua.edu.cn/simple/  ，依赖包含 numpy pandas\npy_module_available('numpy')\npy_module_available('pandas')\npy_module_available('scanpy')\nreticulate::repl_python()\n```\n:::\n\n\n\n\n### R 调用 Python 模块\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 调用os模块(module)的listdir()函数\nos <- reticulate::import(\"os\")\nos$listdir(\"./\")\n\n# 调用seaborn模块的load_dataset()函数\n# 需要seaborn模块已安装\nsns <- import(\"seaborn\")\ntips <- sns$load_dataset(\"tips\")\nprint(head(tips))\n```\n:::\n\n\n\n\n### **R** → Python\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- 1\nB <- c(1, 2, 3)\nC <- c(a = 1, b = 2, c = 3)\nD <- matrix(1:4, nrow = 2)\nE <- data.frame(a = c(1, 2), b = c(3, 4))\nG <- list(1, 2, 3)\nH <- list(c(1, 2), c(3, 4))\nI <- list(a = c(1, 2), b = c(3, 4))\nJ <- function(a, b) {\n  return(a + b)\n  }\nK1 <- NULL\nK2 <- T\nK3 <- F\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n### float\nr.A\ntype(r.A)\n\n### list\nr.B\ntype(r.B)\n\nr.C\ntype(r.C)\n\n### numpy.ndarray\nr.D\ntype(r.D)\n\n### pandas.core.frame.DataFrame\nr.E\ntype(r.E)\n\n### list\nr.G\ntype(r.G)\n\nr.H\ntype(r.H)\n\n### dict\nr.I\ntype(r.I)\n\n### function\nr.J\ntype(r.J)\nr.J(2, 3)\n\n\n### NoneType\nr.K1\ntype(r.K1)\n\n\n### bool\nr.K2\ntype(r.K2)\nr.K3\ntype(r.K3)\n```\n:::\n\n\n\n\n### **Python** → R\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nm = [1, 2, 3]\nn = pd.DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n\nA = 1\nB = [1, 2, 3]\nC = [[1, 2], [3, 4]]\nD1 = [[1], 2, 3]\nD2 = [[1, 2], 2, 3]\n\nE = (1, 2, 3)\n\nFF = ((1, 2), (3, 4))\n\nG = ((1, 2), 3, 4)\n\nH = {\"a\": [1, 2, 3],  \"b\": [2, 3, 4]}\n     \nI = {\"a\": 1,\"b\": [2, 3, 4]}\n     \ndef J(a, b):\n  return a + b\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npy$m\npy$n\n\n### integer\npy$A\nclass(py$A)\n\npy$B\nclass(py$B)\n\n### list\npy$C\nclass(py$C)\n\npy$D1\nclass(py$D1)\n\npy$D2\nclass(py$D2)\n\npy$E\nclass(py$E)\n\npy$FF\nclass(py$FF)\n\npy$G\nclass(py$G)\n\npy$H\nclass(py$H)\n\npy$I\nclass(py$I)\n\n### function\npy$J\nclass(py$J)\npy$J(2, 3)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}